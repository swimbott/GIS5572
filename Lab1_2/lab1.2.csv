,Instruction Sets,,,
How to…,ArcPro GUI,ArcPy,Fiona/Shapely,PostGIS
Create a feature class,Catalog > right click database > New > Feature Class > INSERT DETAILS,"arcpy.management.CreateFeatureclass(arcpy.env.workspace,'empty')","# Define the schema for the feature class. schema = {'geometry': 'Point','properties': {'id': 'int','name': 'str'}} # Create the feature class -> with fiona.open(out_path + '\\' + fc_name, 'w', 'ESRI Shapefile', schema) as out: pass","CREATE TABLE postgis_table (id integer,name text);"
Add points to a feature class,"Be sure Feature Class was created as a a Feature Class ""Point"" Type > Select Edit from the top banner > Select Create in Features tab > Select target Feature class and add points into map","with arcpy.da.InsertCursor(fc_name, fields) as cursor:     point = (43.045231, -87.917923)      cursor.insertRow([point])","with fiona.open(fc_path + '\\' + fc_name, 'w', crs='EPSG:4326', driver='ESRI Shapefile', schema=schema) as output: ->     # Create a list of coordinate tuples ->     coords = [(43.045231, -87.917923), (44.5008, -88.0573), (43.0687, -89.4077)]  ->      # Loop through the coordinates and create a new feature for each point ->     for i, coord in enumerate(coords): -> point = Point(coord) ->         feature = {'geometry': mapping(point),'properties': {'id': i+1,'name': 'Point {}'.format(i+1),'value': i*10.0}} ->          output.write(feature)","CREATE TABLE postgis_stadiums (name VARCHAR(20), id integer, geom geometry(Point,4326));"
Add line to a feature class,"Be sure Feature Class was created as a a Feature Class ""Line"" Type > Select Edit from the top banner > Select Create in Features tab > Select target Feature class and add points to create a line into map","with arcpy.da.InsertCursor(fc_name, fields) as cursor:         line = arcpy.Polyline(arcpy.Array([arcpy.Point(43.045231, -87.917923), arcpy.Point(44.5008, -88.0573)]))     cursor.insertRow([line])","# Create a Line -> coords = [(43.045231, -87.917923), (44.5008, -88.0573), (43.0687, -89.4077)] -> line = LineString(coords) -> props = {'id': 1, 'name': 'Stadium Line'} -> # Convert to a GeoJSON dict -> feature = {'type': 'Feature','geometry': line.__geo_interface__,'properties': props} -> ","CREATE TABLE postgis_stadium_lines (name VARCHAR(20),geom GEOMETRY(LINESTRING, 4326)); -> INSERT INTO postgis_stadium_lines (name, geom) VALUES  ->     ('fiserv_lambeau', ST_GeomFromText('LINESTRING(-87.917923 43.045231, -88.0573 44.5008)', 4326));"
Add polygons to a feature class,"Be sure Feature Class was created as a a Feature Class ""Polygon"" Type > Select Edit from the top banner > Select Create in Features tab > Select target Feature class and add points to create a polygon into map","with arcpy.da.InsertCursor(fc_name, fields) as cursor:       polygon = arcpy.Polygon(arcpy.Array([arcpy.Point(43.045231, -87.917923), arcpy.Point(44.5008, -88.0573), arcpy.Point(43.0687, -89.4077), arcpy.Point(43.0348837277, -87.9616536158)]))        cursor.insertRow([polygon])","schema = {'geometry': 'Polygon','properties': {'id': 'int', 'name': 'str','area': 'float'}} ->  with fiona.open(out_path + ""\\"" + fc_name, ""w"", ""ESRI Shapefile"", schema) as output: ->     coords = [(43.045231, -87.917923), (44.5008, -88.0573), (43.0687, -89.4077), (43.0348837277, -87.9616536158)] ->     poly = Polygon(coords) ->     props = {'id': 1, 'name': 'My polygon', 'area': poly.area}","CREATE TABLE postgis_stadium_polys (id serial primary key,name varchar(20),geom geometry(Polygon)); -> INSERT INTO postgis_stadium_polys (name, geom) VALUES  ->   ('stadium Polygon', ST_GeomFromText('POLYGON((-87.917923 43.045231, -88.0573 44.5008, -89.4077 43.0687, -87.9616 43.0348, -87.917923 43.045231))', 4326));"
View each row in an attribute table for a feature class,In contents > right click layer > click attribute table,"with arcpy.da.SearchCursor(fc_name, fields) as cursor:     for row in cursor:
        print(row)","with fiona.open(shp_path, 'r') as shp: ->     for feat in shp: ->         props = feat['properties'] ->         print(props)",SELECT * FROM postgis_stadium_polys;
View each geometry object in a feature class,In map pane > pan and zoom,"with arcpy.da.SearchCursor(fc_name, fields) as cursor:     for row in cursor:
        print(row[0])","    for i, coord in enumerate(coords):   ->   for feat in shp: ->         geom = shape(feat['geometry']) ->          print(geom)",SELECT * FROM postgis_stadium_polys; -> # then click on the map icon where the data is being shown to see the geometry
Summarize the contents of a feature class,"In attribute table, view headings","result = arcpy.GetSummaryStatistics(fc_name, ""field_name"", ""SUM"")    for row in result:        print(""Sum of 'field_name':"", row.SUM)","with fiona.open(fc_path, ""r"") as fc: ->     meta = fc.meta ->     print(meta)","SELECT COUNT(*), COUNT(name) FROM postgis_stadium_polys; -> # looking at the count of the names in my feature class"
Export to shapefile,"In contents pane > right click layer > data > export features > choose folder location > Choose ""Shapefile"" as output format name it <name>.shp","arcpy.CopyFeatures_management(in_fc, out_shp)","with fiona.open('output_shapefile.shp', 'w', 'ESRI Shapefile', schema) as output: ->     output.write(feature)", # in a command prompt # run: pgsql2shp -f output_shapefile.shp -h your_database_host -u your_username your_database_name your_table_name ->   # enter your password
Export to geodatabase,"In contents pane > right click layer > data > export features > choose folder location > Choose ""file Geodatabase"" as output format > name it <name>.shp","arcpy.CopyFeatures_management(in_fc, out_gdb + ""/"" + out_fc)","with fiona.open('output_gdb.gdb', 'w', driver='OpenFileGDB', schema=schema) as output: ->     output.write(feature)","# in a command prompt -> # run: ogr2ogr -f ""FileGDB"" output_geodatabase.gdb PG:""host=your_database_host user=your_username dbname=your_database_name password=your_password"" -nln output_table_name -nlt POLYGON input_table_name"
,,,        ,
